!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLOCK128_H	./headers/block128.h	2;"	d
Block128	./headers/block128.h	/^	Block128(const std::vector<std::bitset<8>>&);$/;"	p	struct:Block128	access:public	signature:(const std::vector<std::bitset<8>>&)
Block128	./headers/block128.h	/^struct Block128{$/;"	s
Block128	./src/block128.cpp	/^Block128::Block128(const vector<bitset<8>>& data){$/;"	f	class:Block128	signature:(const vector<bitset<8>>& data)
Block128::Block128	./headers/block128.h	/^	Block128(const std::vector<std::bitset<8>>&);$/;"	p	struct:Block128	access:public	signature:(const std::vector<std::bitset<8>>&)
Block128::Block128	./src/block128.cpp	/^Block128::Block128(const vector<bitset<8>>& data){$/;"	f	class:Block128	signature:(const vector<bitset<8>>& data)
Block128::block	./headers/block128.h	/^	std::bitset<8> block[4][4];$/;"	m	struct:Block128	access:public
CONVERTER_H	./headers/converter.h	2;"	d
DATA_H	./headers/data.h	2;"	d
DECRYPTOR_H	./headers/Decryptor.h	2;"	d
Decryptor	./headers/Decryptor.h	/^	Decryptor();$/;"	p	class:Decryptor	access:public	signature:()
Decryptor	./headers/Decryptor.h	/^class Decryptor{$/;"	c
Decryptor	./src/Decryptor.cpp	/^Decryptor::Decryptor(){}$/;"	f	class:Decryptor	signature:()
Decryptor::Decryptor	./headers/Decryptor.h	/^	Decryptor();$/;"	p	class:Decryptor	access:public	signature:()
Decryptor::Decryptor	./src/Decryptor.cpp	/^Decryptor::Decryptor(){}$/;"	f	class:Decryptor	signature:()
Decryptor::award	./headers/Decryptor.h	/^	std::string award;$/;"	m	class:Decryptor	access:private
Decryptor::cipher	./headers/Decryptor.h	/^	std::string cipher;$/;"	m	class:Decryptor	access:private
Decryptor::cipherDecoded	./headers/Decryptor.h	/^	std::string cipherDecoded;$/;"	m	class:Decryptor	access:private
Decryptor::compute	./headers/Decryptor.h	/^	void compute();$/;"	p	class:Decryptor	access:public	signature:()
Decryptor::compute	./src/Decryptor.cpp	/^void Decryptor::compute(){$/;"	f	class:Decryptor	signature:()
Decryptor::dead	./headers/Decryptor.h	/^	int dead;$/;"	m	class:Decryptor	access:private
Decryptor::init	./headers/Decryptor.h	/^	void init();$/;"	p	class:Decryptor	access:public	signature:()
Decryptor::init	./src/Decryptor.cpp	/^void Decryptor::init(){$/;"	f	class:Decryptor	signature:()
Decryptor::iv	./headers/Decryptor.h	/^	byte iv[16];$/;"	m	class:Decryptor	access:private
Decryptor::ivector	./headers/Decryptor.h	/^	std::string ivector;$/;"	m	class:Decryptor	access:private
Decryptor::keyc	./headers/Decryptor.h	/^	long keyc;$/;"	m	class:Decryptor	access:private
Decryptor::mutex	./headers/Decryptor.h	/^	std::mutex mutex;$/;"	m	class:Decryptor	access:private
Decryptor::plen	./headers/Decryptor.h	/^	int plen;$/;"	m	class:Decryptor	access:private
Decryptor::setSIC	./headers/Decryptor.h	/^	void setSIC(std::string,std::string,std::string);$/;"	p	class:Decryptor	access:public	signature:(std::string,std::string,std::string)
Decryptor::setSIC	./src/Decryptor.cpp	/^void Decryptor::setSIC(string su,string iv,string ci){$/;"	f	class:Decryptor	signature:(string su,string iv,string ci)
Decryptor::stop	./headers/Decryptor.h	/^	bool stop;$/;"	m	class:Decryptor	access:private
Decryptor::sufix	./headers/Decryptor.h	/^	std::string sufix;$/;"	m	class:Decryptor	access:private
Decryptor::tfunc	./headers/Decryptor.h	/^	void tfunc(int, long);$/;"	p	class:Decryptor	access:private	signature:(int, long)
Decryptor::tfunc	./src/Decryptor.cpp	/^void Decryptor::tfunc(int number, long portion){$/;"	f	class:Decryptor	signature:(int number, long portion)
Decryptor::threads	./headers/Decryptor.h	/^	int threads;$/;"	m	class:Decryptor	access:private
Decryptor::workers	./headers/Decryptor.h	/^	std::vector<std::thread*> workers;$/;"	m	class:Decryptor	access:private
FLOAD_H	./headers/fload.h	2;"	d
award	./headers/Decryptor.h	/^	std::string award;$/;"	m	class:Decryptor	access:private
base16toBin	./headers/fload.h	/^	std::vector<std::bitset<8>> base16toBin(std::string&);$/;"	p	namespace:fload	signature:(std::string&)
base16toBin	./src/fload.cpp	/^vector<bitset<8>> fload::base16toBin(string& number){$/;"	f	class:fload	signature:(string& number)
base256toBin	./headers/fload.h	/^	std::vector<std::bitset<8>> base256toBin(std::string&);$/;"	p	namespace:fload	signature:(std::string&)
base256toBin	./src/fload.cpp	/^vector<bitset<8>> fload::base256toBin(string& number){$/;"	f	class:fload	signature:(string& number)
block	./headers/block128.h	/^	std::bitset<8> block[4][4];$/;"	m	struct:Block128	access:public
cipher	./headers/Decryptor.h	/^	std::string cipher;$/;"	m	class:Decryptor	access:private
cipher	./src/data.cpp	/^string data::cipher[8]={$/;"	m	class:data	file:
cipherDecoded	./headers/Decryptor.h	/^	std::string cipherDecoded;$/;"	m	class:Decryptor	access:private
compute	./headers/Decryptor.h	/^	void compute();$/;"	p	class:Decryptor	access:public	signature:()
compute	./src/Decryptor.cpp	/^void Decryptor::compute(){$/;"	f	class:Decryptor	signature:()
converter	./headers/converter.h	/^namespace converter{$/;"	n
converter::hexToBin	./headers/converter.h	/^	std::string hexToBin(char);$/;"	p	namespace:converter	signature:(char)
converter::hexToBin	./src/converter.cpp	/^std::string converter::hexToBin(char num){$/;"	f	class:converter	signature:(char num)
data	./headers/data.h	/^namespace data{$/;"	n
data::cipher	./src/data.cpp	/^string data::cipher[8]={$/;"	m	class:data	file:
data::iv	./src/data.cpp	/^string data::iv[8]={$/;"	m	class:data	file:
dead	./headers/Decryptor.h	/^	int dead;$/;"	m	class:Decryptor	access:private
fload	./headers/fload.h	/^namespace fload{$/;"	n
fload::base16toBin	./headers/fload.h	/^	std::vector<std::bitset<8>> base16toBin(std::string&);$/;"	p	namespace:fload	signature:(std::string&)
fload::base16toBin	./src/fload.cpp	/^vector<bitset<8>> fload::base16toBin(string& number){$/;"	f	class:fload	signature:(string& number)
fload::base256toBin	./headers/fload.h	/^	std::vector<std::bitset<8>> base256toBin(std::string&);$/;"	p	namespace:fload	signature:(std::string&)
fload::base256toBin	./src/fload.cpp	/^vector<bitset<8>> fload::base256toBin(string& number){$/;"	f	class:fload	signature:(string& number)
fload::get128	./headers/fload.h	/^	std::vector<std::bitset<8>> get128(const std::vector<std::bitset<8>>&, int = 0);$/;"	p	namespace:fload	signature:(const std::vector<std::bitset<8>>&, int = 0)
fload::get128	./src/fload.cpp	/^vector<bitset<8>> fload::get128(const vector<bitset<8>> &msg, int firstI){$/;"	f	class:fload	signature:(const vector<bitset<8>> &msg, int firstI)
fload::getNum	./headers/fload.h	/^	std::vector<std::bitset<8>> getNum(const std::vector<std::bitset<8>>&,int, int = 0);$/;"	p	namespace:fload	signature:(const std::vector<std::bitset<8>>&,int, int = 0)
fload::getNum	./src/fload.cpp	/^vector<bitset<8>> fload::getNum(const vector<bitset<8>> &msg,int num, int firstI){$/;"	f	class:fload	signature:(const vector<bitset<8>> &msg,int num, int firstI)
fload::loadMsg	./headers/fload.h	/^	std::vector<std::bitset<8>> loadMsg(std::string);$/;"	p	namespace:fload	signature:(std::string)
fload::loadMsg	./src/fload.cpp	/^vector<bitset<8>> fload::loadMsg(string path){$/;"	f	class:fload	signature:(string path)
fload::load_iv	./headers/fload.h	/^	void load_iv(unsigned char*, int, std::string);$/;"	p	namespace:fload	signature:(unsigned char*, int, std::string)
fload::load_iv	./src/fload.cpp	/^void fload::load_iv(unsigned char* out, int size, string key){$/;"	f	class:fload	signature:(unsigned char* out, int size, string key)
fload::load_key	./headers/fload.h	/^	void load_key(unsigned char*, int, std::string);$/;"	p	namespace:fload	signature:(unsigned char*, int, std::string)
fload::load_key	./src/fload.cpp	/^void fload::load_key(unsigned char* out, int size, string key){$/;"	f	class:fload	signature:(unsigned char* out, int size, string key)
fload::printData	./headers/fload.h	/^	void printData(const std::vector<std::bitset<8>>&);$/;"	p	namespace:fload	signature:(const std::vector<std::bitset<8>>&)
fload::printData	./src/fload.cpp	/^void fload::printData(const vector<bitset<8>> &msg){$/;"	f	class:fload	signature:(const vector<bitset<8>> &msg)
get128	./headers/fload.h	/^	std::vector<std::bitset<8>> get128(const std::vector<std::bitset<8>>&, int = 0);$/;"	p	namespace:fload	signature:(const std::vector<std::bitset<8>>&, int = 0)
get128	./src/fload.cpp	/^vector<bitset<8>> fload::get128(const vector<bitset<8>> &msg, int firstI){$/;"	f	class:fload	signature:(const vector<bitset<8>> &msg, int firstI)
getNum	./headers/fload.h	/^	std::vector<std::bitset<8>> getNum(const std::vector<std::bitset<8>>&,int, int = 0);$/;"	p	namespace:fload	signature:(const std::vector<std::bitset<8>>&,int, int = 0)
getNum	./src/fload.cpp	/^vector<bitset<8>> fload::getNum(const vector<bitset<8>> &msg,int num, int firstI){$/;"	f	class:fload	signature:(const vector<bitset<8>> &msg,int num, int firstI)
hexToBin	./headers/converter.h	/^	std::string hexToBin(char);$/;"	p	namespace:converter	signature:(char)
hexToBin	./src/converter.cpp	/^std::string converter::hexToBin(char num){$/;"	f	class:converter	signature:(char num)
init	./headers/Decryptor.h	/^	void init();$/;"	p	class:Decryptor	access:public	signature:()
init	./src/Decryptor.cpp	/^void Decryptor::init(){$/;"	f	class:Decryptor	signature:()
iv	./headers/Decryptor.h	/^	byte iv[16];$/;"	m	class:Decryptor	access:private
iv	./src/data.cpp	/^string data::iv[8]={$/;"	m	class:data	file:
ivector	./headers/Decryptor.h	/^	std::string ivector;$/;"	m	class:Decryptor	access:private
keyc	./headers/Decryptor.h	/^	long keyc;$/;"	m	class:Decryptor	access:private
loadMsg	./headers/fload.h	/^	std::vector<std::bitset<8>> loadMsg(std::string);$/;"	p	namespace:fload	signature:(std::string)
loadMsg	./src/fload.cpp	/^vector<bitset<8>> fload::loadMsg(string path){$/;"	f	class:fload	signature:(string path)
load_iv	./headers/fload.h	/^	void load_iv(unsigned char*, int, std::string);$/;"	p	namespace:fload	signature:(unsigned char*, int, std::string)
load_iv	./src/fload.cpp	/^void fload::load_iv(unsigned char* out, int size, string key){$/;"	f	class:fload	signature:(unsigned char* out, int size, string key)
load_key	./headers/fload.h	/^	void load_key(unsigned char*, int, std::string);$/;"	p	namespace:fload	signature:(unsigned char*, int, std::string)
load_key	./src/fload.cpp	/^void fload::load_key(unsigned char* out, int size, string key){$/;"	f	class:fload	signature:(unsigned char* out, int size, string key)
main	./main.cpp	/^int main(int argc, char* argv[]){	$/;"	f	signature:(int argc, char* argv[])
mutex	./headers/Decryptor.h	/^	std::mutex mutex;$/;"	m	class:Decryptor	access:private
plen	./headers/Decryptor.h	/^	int plen;$/;"	m	class:Decryptor	access:private
printData	./headers/fload.h	/^	void printData(const std::vector<std::bitset<8>>&);$/;"	p	namespace:fload	signature:(const std::vector<std::bitset<8>>&)
printData	./src/fload.cpp	/^void fload::printData(const vector<bitset<8>> &msg){$/;"	f	class:fload	signature:(const vector<bitset<8>> &msg)
setSIC	./headers/Decryptor.h	/^	void setSIC(std::string,std::string,std::string);$/;"	p	class:Decryptor	access:public	signature:(std::string,std::string,std::string)
setSIC	./src/Decryptor.cpp	/^void Decryptor::setSIC(string su,string iv,string ci){$/;"	f	class:Decryptor	signature:(string su,string iv,string ci)
stop	./headers/Decryptor.h	/^	bool stop;$/;"	m	class:Decryptor	access:private
sufix	./headers/Decryptor.h	/^	std::string sufix;$/;"	m	class:Decryptor	access:private
tfunc	./headers/Decryptor.h	/^	void tfunc(int, long);$/;"	p	class:Decryptor	access:private	signature:(int, long)
tfunc	./src/Decryptor.cpp	/^void Decryptor::tfunc(int number, long portion){$/;"	f	class:Decryptor	signature:(int number, long portion)
threads	./headers/Decryptor.h	/^	int threads;$/;"	m	class:Decryptor	access:private
workers	./headers/Decryptor.h	/^	std::vector<std::thread*> workers;$/;"	m	class:Decryptor	access:private
